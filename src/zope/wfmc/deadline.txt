===============
Deadline support
===============

Here we demonstrate and test deadline support in zope.wfmc. Currently, only
SYNCHRONOUSE deadlines are supported. When the deadline condition is met,
the activity is put into its process's finishedActivities, but workitems are
left untouched. Then the appropriate exception transition is followed.

Directory with this file contains sample process using subflows::

    >>> import os
    >>> from zope.wfmc import xpdl
    >>> sample_process = os.path.join(this_directory, "deadline.xpdl")
    >>> with open(sample_process) as f:
    ...     package = xpdl.read(f)

First create environment for executing a process.

    >>> import zope.interface
    >>> from zope.wfmc import interfaces

Define WorkItems used by the process::

    >>> @zope.interface.implementer(interfaces.IWorkItem)
    ... class OutputWorkItem(object):
    ...     id = None
    ...
    ...     def __init__(self, process, activity):
    ...         self.process = process
    ...         self.activity = activity
    ...
    ...     def start(self, args):
    ...         print "START:", args['message']

    >>> @zope.interface.implementer(interfaces.IWorkItem)
    ... class InputWorkItem(object):
    ...     id = None
    ...
    ...     def __init__(self, process, activity):
    ...         self.process = process
    ...         self.activity = activity
    ...
    ...     def start(self, args):
    ...         print "START:", args['message']

Define integration object::

    >>> from zope.wfmc.attributeintegration import AttributeIntegration

    >>> class Integration(AttributeIntegration):
    ...     def administratorParticipant(self, activity, process):
    ...         return "admin"
    ...
    ...     def inputWorkItem(self, participant, process, activity):
    ...         return InputWorkItem(process, activity)
    ...
    ...     def outputWorkItem(self, participant, process, activity):
    ...         return OutputWorkItem(process, activity)

Set integration for all definitions::

    >>> integration = Integration()
    >>> for pd in package.values():
    ...     pd.integration = integration

Register all processes in static factory::

    >>> import zope.component
    >>> from zope.wfmc.process import StaticProcessDefinitionFactory
    >>> pdfactory = StaticProcessDefinitionFactory()
    >>> for pd in package.values():
    ...     pdfactory.register(pd)

    >>> zope.component.provideUtility(pdfactory)

Now we can create and execute our process::

    >>> context = None
    >>> mainproc_def = package['deadline']
    >>> proc = mainproc_def(context)
    >>> proc.start()
    START: First subflow activity
    >>> raise NotImplementedError('Still some testing left to do!')